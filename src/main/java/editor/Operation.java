package editor;


import java.io.Serializable;

/**
 * An object to encapsulate information about modifications being made to a text
 * file. Implements Serializable to allow sending through netty Channel.
 */
public class Operation implements Serializable {

    private static final long serialVersionUID = 1L;

    public static final int PRINT = -1; // Mostly for debugging

    public static final int INSERT = 1; // Adding text to the file
    public static final int DELETE = 0; // Removing text from the file

    public int opsGenerated; // Number of ops generated by the op creator
    public int opsReceived; // Number of ops received by the op creator
    public int type; // "how" to execute this operation
    public int startPos; // Position where we started editing
    public int finalPos; // Position where we finished editing
    public String content; // Applies only to INSERT ops

    public Operation(int type) {
        this.type = type;
        content = "";
    }

    public Operation(int opsGenerated, int opsReceived, int type, int startPos,
                     int finalPos) {
        this.opsGenerated = opsGenerated;
        this.opsReceived = opsReceived;
        this.type = type;
        this.startPos = startPos;
        this.finalPos = finalPos;
    }

    /**
     * Copy constructor
     */
    public Operation(Operation copy) {
        this.opsGenerated = copy.opsGenerated;
        this.opsReceived = copy.opsReceived;
        this.type = copy.type;
        this.startPos = copy.startPos;
        this.finalPos = copy.finalPos;
    }

    /**
     * The Ops generated field will be set during transmission.
     */
    public void setOpsGenerated(int opsGenerated) {
        this.opsGenerated = opsGenerated;
    }

    /**
     * The Ops received field will be set during transmission.
     */
    public void setOpsReceived(int opsReceived) {
        this.opsReceived = opsReceived;
    }

    /**
     * Transforms client operation against server operation.  Server operation
     * takes precedence. This means we always transform our operations under the
     * assumption that the server operation is applied first.
     */
    public static Operation[] transform(Operation client, Operation server) {
        Operation[] ops = new Operation[2];
        if (client.type == INSERT && server.type == INSERT) {
            return transformInserts(client, server);
        }
        if (client.type == DELETE && server.type == DELETE) {
            return transformDeletes(client, server);
        }
        return ops;
    }

    /**
     * Transforms two insert operations. Returns two operations, one the client
     * should apply and one the server should apply to reach a consistent state.
     */
    private static Operation[] transformInserts(Operation client, Operation server) {
        Operation[] ops = new Operation[2]; // [c'][s']
        // Transformed operation for client to execute
        Operation cP = new Operation(server); // c'
        // Transformed operation for server to execute
        Operation sP = new Operation(client); // s'

        int serverIndex = server.startPos;
        int clientIndex = client.startPos;

        if (serverIndex <= clientIndex) {
            // Transform as if server's insert occurred first
            // Insert from client has insert position shifted by length of
            // server's content inserted
            sP.startPos += server.content.length();
        }
        ops[0] = cP;
        ops[1] = sP;
        return ops;
    }


    /**
     * Transforms two delete operations.
     */
    private static Operation[] transformDeletes(Operation client, Operation server) {
        Operation[] ops = new Operation[2];
        Operation cP = new Operation(server); // c'
        Operation sP = new Operation(client); // s'
        int serverStart = server.startPos;
        int serverEnd = server.finalPos;
        int clientStart = server.startPos;
        int clientEnd = server.finalPos;

        return ops;
    }

    // TODO: May not need this method if we send the object directly
    /**
     * String representation of an Operation, understood by the Server
     */
    public String stringToSend() {
        StringBuilder sb = new StringBuilder();
        if (type == INSERT) {
            sb.append("INS ");
        }
        if (type == DELETE) {
            sb.append("DEL ");
        }
        sb.append(startPos);
        sb.append(":");
        sb.append(finalPos);
        sb.append(" ");
        sb.append(content);
        sb.append(" ");
        sb.append(content.length());
        return sb.toString();
    }

    @Override
    /**
     * String representation of an Operation. We call .trim() on the content
     * to eliminate carriage returns / newlines. Not intended to be used to
     * parse instructions to use for applying an Operation to a text file.
     */
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        if (type == INSERT) {
            sb.append("INS ");
        }
        if (type == DELETE) {
            sb.append("DEL ");
        }
        sb.append(startPos);
        sb.append(":");
        sb.append(finalPos);
        sb.append(" ");
        sb.append(content.trim());
        sb.append(" (");
        sb.append(content.length());
        sb.append(")");
        sb.append("]");
        return sb.toString();
    }


}
